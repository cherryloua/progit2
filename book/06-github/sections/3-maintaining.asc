[[_maintaining_gh_project]]
=== Pagpapanatili ng isang Proyekto

Ngayon na kumportable tayong nag-aambag sa isang proyekto, tingnan natin ang kabilang panig: paglikha, pagpapanatili at pangangasiwa ng iyong sariling proyekto.

==== Paglilikha ng isang Bagong Repositoryo

Lumikha ng isang bagong repositoryo upang maibahagi ang ating code ng proyekto.
Simulan sa pamamagitan ng pag-click sa pindutan na ``Bagong Repositoryo'' sa kanang bahagi ng dashboard, o mula sa pindutan na `+` sa itaas na toolbar kasunod sa iyong usernmame gaya ng nakikita sa <<_new_repo_dropdown>>.

.Ang lawak na ``Iyong mga repositoryo''.
image::images/newrepo.png[The ``Your repositories'' area.]

[[_new_repo_dropdown]]
.Ang dropdown na ``Bagong repositoryo''.
image::images/new-repo.png[The ``new repositoryo'' dropdown.]

Ito ay nagdadala sa iyo sa form ng ``bagong repositoryo'':

.Ang form ng ``bagong repositoryo''.
image::images/newrepoform.png[Ang form ng ``bagong repositoryo''.]

Ang kailangan mo lang gawin dito ay magbigay ng isang pangalan ng proyekto; ang lahat ng mga patlang ay ganap na opsyonal.
Sa ngayon, i-click lamang ang pindutan na ``Lumikha ng Repositoryo'' - mayroon kang isang bagong repositoryo sa GitHub, pinangalanang `<user>/<project_name>`.

Dahil wala kang code doon, ipapakita sa iyo ng GitHub ang mga tagubilin kung paano lumikha ng isang bagong tatak ng repositoryo ng Git, o ikonekta ang isang umiiral na proyekto ng Git.
Hindi namin balabaan ito dito; kung kailangan mo ng refresher, i-check out ang <<_git_basics_chapter#_git_basics_chapter>>.

Ngayon na naka-host na ang iyong proyekto sa GitHub, maaari kang magbigay ng URL sa sinuman na gusto mong bahagian ng iyong proyekto.
Bawat proyekto sa GitHub ay maaaring i-access sa HTTPS bilang `https://github.com/<user>/<project_name>`, at sa SSH bilang `git@github.com:<user>/<project_name>`.
Maaaring mag-fetch ang Git mula sa at mag-push sa parehong mga URL na ito, ngunit sila ay kontrolado ng access batay sa mga kredensyal ng gumagamit na kumukonekto dito.

[TANDAAN]
====
Madalas na lalong kanais-nais na ibahagi ang URL na nakabatay sa HTTPS para sa isang pampublikong proyekto, dahil ang gumagamit ay hindi kailangang magkaroon ng isang account sa GitHub upang ma-access ito para sa pag-clone.
Ang mga gumagamit ay magkakaroon ng isang account at isang na-upload na SSH key upang ma-access ang iyong proyekto kung binibigyan mo sila ng SSH URL.
Ang HTTPS ay isa ring eksaktong parehong URL na kanilang idikit sa isang browser upang tingnan ang proyekto doon.
====

==== Pagdaragdag ng mga Tagapangasiwa

Kung ikaw ay nagtatrabaho kasama ang ibang tao na nais mong bigyan ng access sa pag-commit, kailangan mong idagdag sila bilang ``tagapangasiwa''.
Kung si Ben, Jeff, and Louise ay nag-sign up ng mga account sa GitHub, at gusto mo silang bigyan ng access sa pag-push sa iyong repositoryo, maaari mo silang idagdag sa iyong proyekto.
Ang paggawa nito ay nagbibigay sa kanila ng access sa ``push'', na nangangahulugan na mayroon silang access sa pagbasa at pagsulat sa proyekto at repositoryo ng Git.

I-click ang link ng ``Settings'' sa ibaba ng kanang sidebar.

.Ang link ng settings ng repositoryo.
image::images/reposettingslink.png[Ang link ng settings ng repositoryo.]

Pagkatapos piliin ang =``Tagapangasiwa'' mula sa menu sa kaliwang bahagi.
Pagkatapos, magtipa ng username sa kahon, at i-click ang ``Magdagdag ng tagapangasiwa.''
Maaari mong ulitin ito nang maraming beses hangga't gusto mo upang magbigay ng access sa lahat ng iyong gusto
Kung kailangan mong bawiin ang access, i-click lamang ang `` X '' sa kanang bahagi ng kanilang hilera.

.Tagapangasiwa ng Repositoryo.
image::images/tagapangasiwa.png[Ang kahon ng tagapangasiwa ng repositoryo.]

==== Pamamahala ng mga Kahilingan na Pull

Ngayon na mayroon kang isang proyekto na may ilang mga code at marahil kahit na ilang mga tagapangasiwa na mayroon ding access sa push, talakayin natin kung ano ang gagawin kapag kumuha ka ng isang Kahilingan na Pull sa iyong sarili.

Ang Kahilingan na Pull ay maaaring mula sa isang branch sa isang fork ng iyong repositoryo o sila ay maaari mula sa ibang branch sa parehong repositoryo.
Ang tanging kaibahan ay ang mga nasa isang fork ay madalas mula sa mga tao kung saan hindi ka maaaring mag-push sa kanilang branch at hindi nila maaaring mag-push sa iyo, samantalang ang panloob na Kahilingan na Pull ay maaaring ma-access ng parehong partido sa branch.

Para sa mga halimbawang ito, ating ipalagay na ikaw ay ``tonychacon'' at naglikha ka ng isang bagong proyekto na Arduino code na pinangalanang ``fade''.

[[_email_notifications]]
===== Mga Abiso sa Email

May nagsasama at gumagawa ng pagbabago sa iyong code at nagpapadala sa iyo ng Kahilingan na Pull.
Dapat kang makakuha ng email na nag-aabiso sa iyo tungkol sa bagong Kahilingan na Pull at dapat itong magmukhang tulad ng <<_email_pr>>.

[[_email_pr]]
.Abiso sa email ng isang bagong Kahilingan na Pull.
image::images/maint-01-email.png[Pull Request email notification]

Mayroong ilang mga bagay na napapansin tungkol sa email na ito.
Ito ay magbibigay sa iyo ng isang maliit na diffstat - isang listahan ng mga file na nagbago sa Kahilingan na Pull at kung gaano.
Nagbibigay ito sa iyo ng isang link sa Kahilingan na Pull sa GitHub.
Nagbibigay din ito sa iyo ng ilang mga URL na maaari mong gamitin mula sa command line.

Kung mapapansin mo ang linya na nagsasabing `git pull <url> patch-1`, ito ay isang simpleng paraan upang pagsamahin sa isang remote branch nang hindi na kinakailangang magdagdag ng isang remote.
Tinalakay natin ito nang mabilis sa <<_distributed_git#_checking_out_remotes>>.
Kung naisin mo, maaari kang lumikha at lumipat sa isang branch ng paksa at pagkatapos ay patakbuhin ang utos na ito upang magsama sa mga pagbabago sa Kahilingan na Pull.

Ang iba pang mga kagiliw-giliw na mga URL ay ang mga URL na `.diff` at` .patch`, na kung saan ay maaari mong hulaan, magbigay ng pinag-isang diff at patch na bersyon ng Kahilingan na Pull.
Maaari mong pagsamahin sa trabaho ng Kahilingan na Pull sa isang bagay na tulad nito:

[source,console]
----
$ curl http://github.com/tonychacon/fade/pull/1.patch | git am
----

===== Pangangasiwa sa Kahilingan na Pull

Sa natalakay sa <<_github#_github_flow>>, maaari ka na ngayong magkaroon ng pag-uusap sa taong nagbukas ng Kahilingan na Pull.
Maaari kang magkomento sa mga tiyak na linya ng code, magkomento sa buong commit o magkomento sa buong Kahilingan na Pull mismo, gamit ang GitHub Flavored Markdown saanman.

Sa tuwing may ibang komento sa Kahilingan na Pull patuloy kang makakakuha ng mga abiso sa email upang malaman mo na may nangyayaring aktibidad.
Ang bawat isa ay may isang link sa Kahilingan na Pull kung saan ang aktibidad ay nangyayari at maaari mo ring direktang tumugon sa email upang magkomento sa thread ng Kahilingan na Pull.

.Kasama sa thread ang mga tugon sa mga email.
image::images/maint-03-email-resp.png[Email response]

Sa sandaling ang code ay nasa isang lugar na gusto mo at nais na pagsamahin ito, maaari mong i-pull ang code pababa at pagsamahin ito nang lokal, alinman sa `git pull <url> <branch>` syntax na nakita natin kanina, o sa pamamagitan ng pagdaragdag ng fork bilang isang remote at pagkuha at pagsasama.

Kung ang pagsama-sama ay walang halaga, maaari mo ring pindutin ang pindutan na ``Merge'' sa site ng GitHub.
Ito ay gagawa ng isang pagsama-sama na ``non-fast-forward'', na naglilikha ng isang merge commit kahit na ang merge na naka-fast-forward ay posible.
Nangangahulugan ito na kung anuman, sa bawat oras na pindutin mo ang pindutan ng merge, isang merge commit ay nilikha.
Sa makikita mo sa <<_merge_button>>, binibigay sa iyo ng GitHub ang lahat na impormasyong ito kung i-click mo ang link ng implikasyon.

[[_merge_button]]
.Pindutan na merge at mga tagubilin sa manu-manong pagsama-sama ng isang Kahilingan na Pull.
image::images/maint-02-merge.png[Merge button]

Kung nagpasya kang hindi mo nais na pagsamahin ito, maaari mo ring isara ang Kahilingan na Pull at aabisuhan ang taong nagbukas nito.

[[_pr_refs]]
===== Refs ng Kahilingan na Pull

Kung ikaw ay nakikitungo sa isang *maraming* mga Kahilingan na Pull at hindi nais na magdagdag ng isang bungkos ng mga remote o gumawa ng isang beses na mga pull sa bawat oras, may isang malinis na trick na pinapahintulutan ng GitHub na gawin mo.
Ito ay isang konting advanced na trick at tatalakayin natin ang mga detalye nito sa <<_git_internals#_refspec>>, ngunit ito ay maaaring kapaki-pakinabang.

Ang GitHub ay tunay na nag-aanunsiyo ng mga branch ng Kahilingan na Pull para sa isang repositoryo bilang uri ng mga pseudo-branch sa server. Bilang default hindi mo makuha ang mga ito kapag ikaw ay nag-clone, ngunit doon sila sa isang nakakubling paraan at maaari mong madaling ma-access ang mga ito.

Upang ipakita ito, gagamitin namin ang isang mababang antas na utos (madalas na tinutukoy bilang isang utos na ``plumbing'', kung saan babasahin natin ang tungkol dito nang higit pa sa <<_git_internals#_plumbing_porcelain>>) na tinawag na `ls-remote`.
Ang utos na ito ay karaniwang hindi ginagamit sa pang-araw-araw na pagpapatakbo ng Git ngunit ito ay kapaki-pakinabang upang ipakita sa atin kung anong mga reperensiya ang naroroon sa server.

Kung papatakbuhin natin ang utos na ito laban sa repositoryo na ``blink'' na ating ginamit natin kanina, makakakuha tayo ng listahan sa lahat ng mga branch at mga tag at ibang mga reperensiya sa repositoryo.

[source,console]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

Siyempre, kung ikaw ay nasa iyong repositoryo at nagpapatakbo ka ng `git ls-remote origin` o anumang remote na nais mong suriin, ipapakita nito sa iyo ang isang bagay na katulad nito.

Kung ang repositoryo ay nasa GitHub at mayroon kang anumang mga Kahilingan na Pull na nabuksan, makakakuha ng mga reperensiyang ito na naka-prefix ng `refs/pull/`.
Ang mga ito ay talagang mga branch, ngunit dahil ang mga ito ay wala sa ilalim ng `refs/heads/` hindi mo makuha ang mga ito nang normal kapag nag-clone ka o kumukuha mula sa server - ang proseso ng pagkuha ay hindi pinapansin ang mga ito nang normal.

Mayroong dalawang reperensiya sa bawat Kahilingan na Pull - ang isang na nagtatapos sa mga punto na `/head` sa estaktong parehong commit bilang huling commit sa branch ng Kahilingan na Pull.
Kaya kung may isang nagbubukas ng Kahilingan na Pull sa ating repositoryo at ang kanilang branch ay pinangalanang `bug-fix` at ito ay nakaturo sa commit na `a5a775`, kung gayon sa *ating* repositoryo, wala tayong branch na `bug-fix` (dahil iyon ay nasa kanilang fork), nganit tayo ay  _magkakaroon_ ng `pull/<pr#>/head` na nakatuturo sa `a5a775`.
Ito ay nangangahulugan na madali nating ma-pull ang bawat branch ng Kahilingan na Pull sa isang beses nang walang kinakailangang pagdagdag ng isang bungkos ng mga remote.

Ngayon, maaari mong gawin ang isang bagay tulad ng pagkuha ng direktang reperensiya.

[source,console]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

Ito ay nagsasabi sa Git, ``Kumonekta sa remote na `origin`, at i-download ang ref na pinangalanang `refs/pull/958/head`.''
Masayang sinusunod ng Git, at nagda-download ng lahat na kinakailangan mo sa pagbuo ng ref na iyon, at naglalagay ng isang pointer sa commit na gusto mo sa ilalim ng `.git/FETCH_HEAD`.
Maaari mong sundan iyon ng `git merge FETCH_HEAD` sa branch na gusto mong suriin, ngunit ang mensahe ng merge commit ay magiging mukhang kakaiba.
Gayundin, kung sinusuri mo ang *maraming* mga kahilingan na pull, ito ay nakakapagod.

Mayroon ding paraan upang ma-fetch ang _lahat_ na mga kahilangan na pull, at nagsisigurado na ang mga ito ay laging bago sa tuwing ikaw ay kumukonekta sa remote.
Buksan ang `.git/config` sa iyong paboritong editor, at hanapin ang remote na `origin`.
Dapat magiging magmukhang ganito:

[source,ini]
----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

Ang linyang iyon na nagsisimula sa `fetch =` ay isang ``refspec.''
Ito'y isang paraan ng pagmamapa ng mga pangalan sa remote sa mga pangalan sa iyong lokal na direktoryo na `.git`.
Ang partikular na ito ay nagsasabi sa Git, "ang mga bagay sa remote na nasa ilalim ng `refs/heads` ay dapat mapunta sa aking lokal na repositoryo sa ilalim ng `refs/remotes/origin`."
Maaari mong mabago ang seksiyon na ito upang magdagdag ng iba pang refspec:

[source,ini]
----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

Ang linyang iyon ay nagsasabi sa Git, ``Lahat ng mga ref na nagmumukhang `refs/pull/123/head` ay dapat nakaimbak nang lokal kagaya ng `refs/remotes/origin/pr/123`.''
Ngayon, kung ikaw ay nag-save ng file na iyon, at gumawa ng isang `git fetch`:

[source,console]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

Ngayon lahat ng mga kahilingan na pull na naka-remote ay kinakatawan nang lokal na may mga ref na kumilos tulad ng pagsubaybay sa mga branch; ang mga ito ay read-only, at ito ay na-update kapag gumawa ka ng isang fetch.
Ginagawang napakadali nitong magsubok ng code mula sa isang kahilingan na pull ng pa-lokal:

[source,console]
----
$ git checkout pr/2
Nag-check out ng mga file: 100% (3769/3769), tapos na.
Branch pr/2 nag-set up upang sumaybay sa remote branch pr/2 mula sa origin.
Pinalit sa isang bagong branch na 'pr/2'
----

Tatandaan ng nakamatang-agila sa inyo ang `head` sa huli ng remote na bahagi ng refspec.
Mayroon ding ref na `refs/pull/#/merge` sa panig ng GitHub , na kumakatawan sa commit na magiging resulta kung i-push mo ang pindutan na ``merge'' sa site.
Ito ay nagpapahintulot sa iyo na suriin ang merge bago pindutin ang pindutan.


===== Pull Requests on Pull Requests

Not only can you open Pull Requests that target the main or `master` branch, you can actually open a Pull Request targeting any branch in the network.
In fact, you can even target another Pull Request.

If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you're not sure is a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.

When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you're requesting to pull to and which you're requesting to pull from.
If you hit the ``Edit'' button at the right of that box you can change not only the branches but also which fork.

[[_pr_targets]]
.Manually change the Pull Request target fork and branch.
image::images/maint-04-target.png[PR targets]

Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project.

==== Mentions and Notifications

GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.

In any comment you can start typing a `@` character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.

.Start typing @ to mention someone.
image::images/maint-05-mentions.png[Mentions]

You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.

Once you post a comment with a user mention, that user will be notified.
This means that this can be a really effective way of pulling people into conversations rather than making them poll.
Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.

If someone gets mentioned on a Pull Request or Issue, they will be ``subscribed'' to it and will continue getting notifications any time some activity occurs on it.
You will also be subscribed to something if you opened it, if you're watching the repository or if you comment on something.
If you no longer wish to receive notifications, there is an ``Unsubscribe'' button on the page you can click to stop receiving updates on it.

.Unsubscribe from an Issue or Pull Request.
image::images/maint-06-unsubscribe.png[Unsubscribe]

===== The Notifications Page

When we mention ``notifications'' here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the ``Notification center'' tab from the settings page, you can see some of the options you have.

.Notification center options.
image::images/maint-07-notifications.png[Notification center]

The two choices are to get notifications over ``Email'' and over ``Web'' and you can choose either, neither or both for when you actively participate in things and for activity on repositories you are watching.

====== Web Notifications

Web notifications only exist on GitHub and you can only check them on GitHub.
If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in <<_not_center>>.

[[_not_center]]
.Notification center.
image::images/maint-08-notifications-page.png[Notification center]

If you click on that, you will see a list of all the items you have been notified about, grouped by project.
You can filter to the notifications of a specific project by clicking on its name in the left hand sidebar.
You can also acknowledge the notification by clicking the checkmark icon next to any notification, or acknowledge _all_ of the notifications in a project by clicking the checkmark at the top of the group.
There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.

All of these tools are very useful for handling large numbers of notifications.
Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.

====== Email Notifications

Email notifications are the other way you can handle notifications through GitHub.
If you have this turned on you will get emails for each notification.
We saw examples of this in <<_email_notification>> and <<_email_pr>>.
The emails will also be threaded properly, which is nice if you're using a threading email client.

There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.

For instance, if we look at the actual email headers sent to Tony in the email shown in <<_email_pr>>, we will see the following among the information sent:

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

There are a couple of interesting things here.
If you want to highlight or re-route emails to this particular project or even Pull Request, the information in `Message-ID` gives you all the data in `<user>/<project>/<type>/<id>` format.
If this were an issue, for example, the `<type>` field would have been ``issues'' rather than ``pull''.

The `List-Post` and `List-Unsubscribe` fields mean that if you have a mail client that understands those, you can easily post to the list or ``Unsubscribe'' from the thread.
That would be essentially the same as clicking the ``mute'' button on the web version of the notification or ``Unsubscribe'' on the Issue or Pull Request page itself.

It's also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.

==== Special Files

There are a couple of special files that GitHub will notice if they are present in your repository.

==== README

The first is the `README` file, which can be of nearly any format that GitHub recognizes as prose.
For example, it could be `README`, `README.md`, `README.asciidoc`, etc.
If GitHub sees a README file in your source, it will render it on the landing page of the project.

Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project.
This generally includes things like:

* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it

Since GitHub will render this file, you can embed images or links in it for added ease of understanding.

==== CONTRIBUTING

The other special file that GitHub recognizes is the `CONTRIBUTING` file.
If you have a file named `CONTRIBUTING` with any file extension, GitHub will show <<_contrib_file>> when anyone starts opening a Pull Request.

[[_contrib_file]]
.Opening a Pull Request when a CONTRIBUTING file exists.
image::images/maint-09-contrib.png[Contributing notice]

The idea here is that you can specify specific things you want or don't want in a Pull Request sent to your project.
This way people may actually read the guidelines before opening the Pull Request.

==== Project Administration

Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.

===== Changing the Default Branch

If you are using a branch other than ``master'' as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository's settings page under the ``Options'' tab.

[[_default_branch]]
.Change the default branch for a project.
image::images/maint-10-default-branch.png[Default branch]

Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.

===== Transferring a Project

If you would like to transfer a project to another user or an organization in GitHub, there is a ``Transfer ownership'' option at the bottom of the same ``Options'' tab of your repository settings page that allows you to do this.

[[_transfer_project]]
.Transfer a project to another GitHub user or Organization.
image::images/maint-11-transfer.png[Transfer]

This is helpful if you are abandoning a project and someone wants to take it over, or if your project is getting bigger and want to move it into an organization.

Not only does this move the repository along with all its watchers and stars to another place, it also sets up a redirect from your URL to the new place.
It will also redirect clones and fetches from Git, not just web requests.
