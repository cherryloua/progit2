[[_git_svn]]
==== Git at Subversion

(((Subversion)))(((Interoperasyon kasama ang ibang mga VCS, Subversion)))
Isang malaking bahagi ng mga proyekto ng open source na development at isang magandang numero ng korporasyon na mga proyekto ay gumagamit ng Subversion upang mamahala ng kanilang source code.
Ito ay nasa paligid na sa higit na isang dekada, at para sa madalas na pagkakataon ito ay ang _de facto_ na VCS na pagpipilian para sa mga open-source na proyekto.
Ito rin ay sobrang katulad sa maraming paraan sa CVS, na itinuring na malaking lalaki ng mundo ng source-control bago sa iyon.

(((git nga utos, svn)))(((git-svn)))
Isa sa dakilang mga tampok ng Git ay isang dalawang-direksyong tulay sa Subversion na tinatawag na `git svn`.
Ito ay isang kasangkapan na nagpapahintulot sa iyo na gumamit ng Git bilang isang balidong kliyente sa isang Subversion na server, kaya maaari mong gamitin ang lahat ng mga lokal na tampok ng Git at pagkatapos ay i-push sa isang Subversion na server na kunyari ikaw ay lokal na gumagamit ng Subversion.
Ito ay nangangahulugang maaari kang gumawa ng lokal na pag-branch at pag-merge, gumamit ng staging na lawak, gumamit ng pag-rebase at pag-cherry-pick, at iba pa, habang ang iyong mga katulong ay patuloy na nagtatrabaho sa kanilang madilim at makalumang pamamaraan.
Magandang paraan na ilabas nang panakaw ang Git sa korporasyon na environment at tumulong sa iyong kapwa mga developer na maging mas mahusay habang ikaw ay naka-lobby upang kunin ang imprastrakturang nabago upang ganap na suportahan ang Git.
Ang Subversion na tulay ay ang pasukan na droga sa DVCS na mundo.

===== `git svn`

Ang base na utos sa Git para sa lahat ng Subversion na pagtutulay na mga utos ay ang `git svn`.
Ito ay kumukuha ng ilang mga utos, kaya ipapakita natin ang madalas na karaniwan habang pumupunta sa iilang simpleng mga daloy ng trabaho.

Importanteng tandaan na kapag ikaw ay gumagamit ng `git svn`, ikaw ay nakikipag-ugnayan sa Subversion, na isang sistema na sobrang kakaibang gumagana mula sa Git.
Bagaman *maaari* kang gumawa ng lokal na pag-branch at pag-merge, ito ay pangkalahatang pinakamahusay upang panatilihin ang iyong kasaysayan bilang linear hangga't maaari sa pamamagitan ng pag-rebase ng iyong trabaho, at iiwasan ang paggawa ng mga bagay katulad ng sabay-sabay na pakikipag-ugnayan sa isang Git na remote na repositoryo.

Huwag muling isulat ang iyong kasaysayan at subukang mag-push muli, at huwag mag-push sa isang kahilera na Git na repositoryo upang makipagtulungan kasama ang kapwa mga developer ng Git sa parehong pagkakataon.
Ang Subversion ay maaaring magkaroon lamang ng isang linear na kasaysayan, at madali itong ikalito.
Kung ikaw ay nagtatrabaho sa isang koponan, at ang ilan ay gumagamit ng SVN at ang iba ay gumagamit ng Git, siguraduhing ang lahat ay gumagamit ng SVN na server upang makipagtulungan – ang paggawa nito ay gagawing mas madali ang iyong buhay.

===== Pag-set Up

Upang ipakita ang functionality na ito, kailangan mo ng isang tipikal na SVN na repositoryo na kung saan mayroon kang access sa pagsulat.
Kung gusto mong kopyahin ang mga halimbawang ito, kailangan mong gumawa ng isang nasusulatang kopya ng isang SVN na test na repositoryo.
Upang madaling gawin ito, maaari mong gamitin ang isang kasangkapan na tinatawag na `svnsync` na dumarating kasama ang Subversion.

Upang sumunod, una mong kailangang gumawa ng isang bagong lokal na Subversion na repositoryo.

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

Pagkatapos, paganahin lahat ang mga user upang baguhin ang mga revprop – ang madaling paraan ay ang pagdagdag ng isang `pre-revprop-change` na iskrip na palaging naglalabas ng 0:

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

Maaari mo na ngayong i-sync ang proyektong ito sa iyong lokal na makina sa pamamagitan ng pagtawag ng `svnsync init` gamit ang patungo at mula na mga repositoryo.

[source,console]
----
$ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/
----

Itinatakda nito ang mga katangian upang patakbuhin ang sync.
Maaari mo na ring i-clone ang code sa pamamagitan ng pagpapatakbo ng

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

Bagaman ang operasyong ito ay tumatagal lamang ng ilang mga minuto, kung susubukan mong kopyahin ang orihinal na mga repositoryo sa ibang remote na repositoryo sa halip ng isang lokal, ang proseso ay tatagal ng halos isang oras, kahit bagaman mayroong mas mababa kaysa sa 100 na mga commit.
Ang Subversion ay kailangang mag-clone ng isang rebisyon sa isang pagkakataon at pagkatapos ay i-push ito pabalik sa ibang repositoryo – ito ay nakakatawang hindi mabisa, ngunit ito lamang ang madaling paraan upang gawin ito.

===== Pagsisimula

Ngayon na mayroon ka nang isang Subversion na repositoryo kung saan ikaw ay may access sa pagsulat, maaari ka nang tumahak sa isang tipikal na daloy ng trabaho.
Magsisimula ka sa `git svn clone` na utos, na nag-i-import ng isang buong Subversion na repositoryo sa isang lokal na Git na repositoryo.
Tandaan na kung ikaw ay nag-i-import mula sa isang tunay na naka-host na Subversion na repositoryo, dapat mong palitan ang `file:///tmp/test-svn` dito gamit ang URL ng iyong Subversion na repositoryo:

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

Ito ay nagpapatakbo ng katumbas na dalawang mga utos – ang `git svn init` na sinusundan ng `git svn fetch` – sa URL na iyong ibinigay.
Ito ay maaaring magtagal ng ilang saglit.
Kung, halimbawa, ang pagsubok na proyekto ay mayroon lamang halos 75 na mga commit at ang codebaase ay hindi ganon kalaki, ang Git gayunpaman ay dapat mag-check out sa bawat bersyon, iisa sa bawat pagkakataon, at mag-commit nito nang indibidwal.
Para sa isang proyekto na may daan-daan o libo-libong mga commit, ito ay maaaring literal na tatagal ng ilang mga oras o kahit mga araw upang matapos.

Ang `-T trunk -b branches -t tags` na parte ay sasabihan ang Git na itong Subversion na repositoryo ay sumusunod sa batayan ng pag-branch at pag-tag na mga kombensyon.
Kung kakaiba mong papangalanan ang iyong trunk, mga branch, o mga tag, maaari mong baguhin ang mga opsyon na ito.
Dahil ito ay sobrang karaniwan, maaari mong palitan ang buong parte gamit ang `-s`, na nangangahulugang pamantayan na layout at nagpapahiwatig ng lahat ng mga opsyon na iyon.
Ang sumusunod na uto ay katumbas:

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

Sa puntong ito, dapat kang magkaroon ng isang balidong Git na repositoryo na nag-import ng iyong mga branch at mga tag:

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

Tandaan kung paano namamahala ang kasangkapang ito sa Subversion na mga tag bilang remote na mga ref.
(((git na mga utos, show-ref)))
Tingnan natin ng malapitan gamit ang Git plumbing na utos na `show-ref`:

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

Hindi ito gagawin ng Git kapag ito ay nagko-clone mula sa isang Git na server; narito ang kung ano ang hitsura ng repositoryo na may mga tag pagkatapos ng isang preskong clone:

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

Ang Git ay direktang magpi-fetch ng mga tag sa `refs/tags`, sa halip ng pagtrato sa kanila bilang remote na mga branch.

===== Pag-commit Pabalik sa Subversion

Ngayon na mayroon ka nang isang gumaganang direktoryo, maaari ka nang gumawa ng ilang trabaho at i-push ang iyong mga commit pabalik sa upstream, ang epektibong paggamit ng Git bilang isang SVN na kliyente.
Kung ikaw ay nag-edit ng isa sa mga file at nag-commit nito, mayroon kang isang commit na lokal na umiiral sa Git na hindi umiiral sa Subversion na server:

[source,console]
----
$ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)
----

Susunod, kailangan mong i-push ang iyong pagbabago sa upstream.
Pansinin kung paano nito binabago ang paraan ng iyong pagtatrabaho sa Subversion – maaari kang gumawa ng iilang mga commit habang naka-offline at pagkatapos ay i-push lahat ang mga ito nang sabay-sabay sa Subversion na server.
Upang mag-push sa isang Subversion na server, patakbuhin mo ang `git svn dcommit` na utos:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Kinukuha nito lahat ng mga commit na ginawa mo sa itaas ng Subversion na server na code, gagawa ng isang Subversion na commit sa bawat isa, at pagkatapos ay susulatang muli ang iyong lokal na Git na commit upang magsama ng isang natatanging identifier.
Ito ay importante dahil ito ay nangangahulugan na ang lahat ng SHA-1 na mga checksum para sa iyong mga commit na pagbabago.
Bahagyang para sa dahilang ito, ang pagtatrabaho sa Git na nakabase na remote na mga bersyon ng iyong mga proyekto kasabay nito ang isang Subversion na server ay hindi isang magandang ideya.
Kung titingnan mo ang huling commit, maaari mong tingnan ang bagong `git-svn-id` na naidagdag:

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

Pansinin na ang SHA-1 na checksum na orihinal na nagsimula sa `4af61fd` kapag ang iyong na-commit ngayon ay nagsisimula sa `95e0222`.
Kung gusto mong mag-push sa kapwa isang Git na server at isang Subversion na server, kailangan mo munang mag-push (`dcommit`) sa Subversion na server, dahil ang aksyong iyon ay bumubago sa iyong commit na datos.

===== Pag-pull papasok sa Bagong mga Pagbabago

Kung ikaw ay nagtatrabaho kasama ang ibang mga developer, pagkatapos sa ilang punto isa sa inyo ay mag-push, at ang isa pa ay susubukang mag-push ng isang pagbabago na magkasalungat.
Ang pagbabagong iyon ay hindi tatanggapin hanggang magmi-merge ka sa kanilang trabaho.
Sa `git svn`, ito ay magmumukhang ganito:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Upang malutas ang sitwasyong ito, maaari mong patakbuhin ang `git svn rebase`, na magpu-pull ng anumang mga pagbabago sa server na hindi pa nasa iyo at iri-rebase ang anumang trabaho na nasa iyo sa itaas ng anumang nasa server:

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Ngayon, lahat ng iyong trabaho ay nasa itaas ng kung ano ang nasa Subversion na server, kaya maaari kang matagumpay na mag-`dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Tandaan na hindi tulad ng Git, na nangangailangan sa iyo na mag-merge sa upstream na trabaho na hindi pa nasa iyo sa lokal bago ka maka-push, ang `git svn` ay ipapagawa lamang ito sa iyo kung ang mga pagbabago ay magkasalungat (masyadong katulad ng kung paano gumagana ang Subversion).
Kung may ibang tao na nagpu-push ng pagbabago sa isang file at pagkatapos ay nag-push ka ng isang pagbabago sa ibang file, ang iyong `dcommit` ay gagana ng maayos.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

Ito ay importanteng tandaan, dahil ang kinalalabasan ay isang estado ng proyekto na hindi umiiral sa alinman sa iyong mga kompyuter kapag ikaw ay nag-push.
Kung ang mga pagbabago ay hindi tugma ngunit walang magkasalungat, maaari mong makuha ang mga isyu na mahirap na suriin.
Ito ay magkaiba kaysa sa paggamit ng isang Git na server – sa Git, maaari mong ganap na subukan ang estado sa iyong kliyente na sistema bago i-ambag ito, samantalang sa SVN, hindi mo kailanmang madaling matiyak na ang mga estado bago sa commit at pagkatapos sa commit ay magkakahawig.

Kailangan mo ring patakbuhin ang utos na ito upang i-pull papasok ang mga pagbabago mula sa Subversion na server, kahit na kung ikaw ay hindi pa handang sariling mag-commit.
Maaari mong patakbuhin ang `git svn fetch` upang kunin ang bagong datos, ngunit ang `git svn rebase` ay gagawa sa fetch at pagkatapos ay ia-update ang iyong lokal na mga commit.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

Ang pagpapatakbo ng `git svn rebase` sa bawat pagkakataon ay sinisiguradong ang iyong code ay palaging napapanahon.
Kailangan mong siguraduhin na ang iyong tinatrabahong direktoryo ay malinis kapag ikaw ay nagpatakbo nito, bagaman.
Kung mayroon kang lokal na mga pagbabago, kailangan mong alinmang i-stash ang iyong trabaho o pansamantalang i-commit ito bago patakbuhin `git svn rebase` – kung hindi man, ang utos ay hihinto kung nakikita nito na ang rebase ay magreresulta ng isang merge na salungatan.

===== Mga Isyu sa Pag-branch ng Git

Kapag ikaw ay naging komportable na sa isang Git na daloy ng trabaho, malamang ikaw ay makakalikha ng paksa na mga branch, gumawa ng trabaho sa mga ito, at pagkatapos ay papasok na i-merge ang mga ito.
Kung ikaw ay nag-push sa isang Subversion na server sa pamamagitan ng `git svn`, malamang gusto mong i-rebase ang iyong trabaho sa isang solong branch sa bawat oras sa halip na sama-samang i-merge ang mga branch.
Ang dahilan upang gustuhin ang pag-rebase ay ang Subversion ay may isang linear na kasaysayan at hindi nakikitungo katulad ng Git, kaya ang `git svn` ay sumusunod lamang sa unang magulang kapag pinapalitan ang mga snapshot sa Subversion na mga commit.

Ipagpalagay na ang iyong kasaysayan ay magmumukhang katulad ng sumusunod: lumikha ka ng isang `experiment` na branch, gumawa ng dalawang mga commit, at pagkatapos ay na-merge ang mga ito pabalik sa `master`.
Kapag ikaw ay nag-`dcommit`, makikita mo ang awtput na katulad nito:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Ang pagpapatakbo ng `dcommit` sa isang branch na may na-merge na kasaysayan ay gagana ng maayos, maliban kapag ikaw ay tumingin sa iyong kasaysayan ng Git na proyekto, hindi nito sinulatang muli ang alinman sa mga commit na ginawa mo sa `experiment` na branch – sa halip, ang lahat ng mga pagbabagong iyon ay magpapakita sa SVN na bersyon ng solong merge na commit.

Kapag may ibang tao na magko-clone ng trabahong iyon, lahat ng makikita nila ay merge na commit kasama ang lahat na trabahong napipi sa iyon, kagaya ng pagpatakbo mo ng `git merge --squash`; hindi nila makikita ang commit na datos tungkol sa kung saan ito nanggaling o kailan ito na-commit.

===== Subversion na Pag-branch

Ang pag-branch sa Subversion ay hindi pareho sa pag-branch sa Git; kung maaari mong maiwasan ang paggamit nito nang masyado, iyon na marahil ang pinakamahusay.
Gayunpaman, maaari kang bumuo at mag-commit sa mga branch sa Subversion gamit ang `git svn`.

===== Creating a New SVN Branch

To create a new branch in Subversion, you run `git svn branch [new-branch]`:

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

This does the equivalent of the `svn copy trunk branches/opera` command in Subversion and operates on the Subversion server.
It's important to note that it doesn't check you out into that branch; if you commit at this point, that commit will go to `trunk` on the server, not `opera`.

===== Switching Active Branches

Git figures out what branch your dcommits go to by looking for the tip of any of your Subversion branches in your history – you should have only one, and it should be the last one with a `git-svn-id` in your current branch history.

If you want to work on more than one branch simultaneously, you can set up local branches to `dcommit` to specific Subversion branches by starting them at the imported Subversion commit for that branch.
If you want an `opera` branch that you can work on separately, you can run

[source,console]
----
$ git branch opera remotes/origin/opera
----

Now, if you want to merge your `opera` branch into `trunk` (your `master` branch), you can do so with a normal `git merge`.
But you need to provide a descriptive commit message (via `-m`), or the merge will say ``Merge branch opera'' instead of something useful.

Remember that although you're using `git merge` to do this operation, and the merge likely will be much easier than it would be in Subversion (because Git will automatically detect the appropriate merge base for you), this isn't a normal Git merge commit.
You have to push this data back to a Subversion server that can't handle a commit that tracks more than one parent; so, after you push it up, it will look like a single commit that squashed in all the work of another branch under a single commit.
After you merge one branch into another, you can't easily go back and continue working on that branch, as you normally can in Git.
The `dcommit` command that you run erases any information that says what branch was merged in, so subsequent merge-base calculations will be wrong – the `dcommit` makes your `git merge` result look like you ran `git merge --squash`.
Unfortunately, there's no good way to avoid this situation – Subversion can't store this information, so you'll always be crippled by its limitations while you're using it as your server.
To avoid issues, you should delete the local branch (in this case, `opera`) after you merge it into trunk.

===== Subversion Commands

The `git svn` toolset provides a number of commands to help ease the transition to Git by providing some functionality that's similar to what you had in Subversion.
Here are a few commands that give you what Subversion used to.

====== SVN Style History

If you're used to Subversion and want to see your history in SVN output style, you can run `git svn log` to view your commit history in SVN formatting:

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

You should know two important things about `git svn log`.
First, it works offline, unlike the real `svn log` command, which asks the Subversion server for the data.
Second, it only shows you commits that have been committed up to the Subversion server.
Local Git commits that you haven't dcommited don't show up; neither do commits that people have made to the Subversion server in the meantime.
It's more like the last known state of the commits on the Subversion server.

====== SVN Annotation

Much as the `git svn log` command simulates the `svn log` command offline, you can get the equivalent of `svn annotate` by running `git svn blame [FILE]`.
The output looks like this:

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

Again, it doesn't show commits that you did locally in Git or that have been pushed to Subversion in the meantime.

====== SVN Server Information

You can also get the same sort of information that `svn info` gives you by running `git svn info`:

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

This is like `blame` and `log` in that it runs offline and is up to date only as of the last time you communicated with the Subversion server.

====== Ignoring What Subversion Ignores

If you clone a Subversion repository that has `svn:ignore` properties set anywhere, you'll likely want to set corresponding `.gitignore` files so you don't accidentally commit files that you shouldn't.
`git svn` has two commands to help with this issue.
The first is `git svn create-ignore`, which automatically creates corresponding `.gitignore` files for you so your next commit can include them.

The second command is `git svn show-ignore`, which prints to stdout the lines you need to put in a `.gitignore` file so you can redirect the output into your project exclude file:

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

That way, you don't litter the project with `.gitignore` files.
This is a good option if you're the only Git user on a Subversion team, and your teammates don't want `.gitignore` files in the project.

===== Git-Svn Summary

The `git svn` tools are useful if you're stuck with a Subversion server, or are otherwise in a development environment that necessitates running a Subversion server.
You should consider it crippled Git, however, or you'll hit issues in translation that may confuse you and your collaborators.
To stay out of trouble, try to follow these guidelines:

* Keep a linear Git history that doesn't contain merge commits made by `git merge`.
  Rebase any work you do outside of your mainline branch back onto it; don't merge it in.
* Don't set up and collaborate on a separate Git server.
  Possibly have one to speed up clones for new developers, but don't push anything to it that doesn't have a `git-svn-id` entry.
  You may even want to add a `pre-receive` hook that checks each commit message for a `git-svn-id` and rejects pushes that contain commits without it.

If you follow those guidelines, working with a Subversion server can be more bearable.
However, if it's possible to move to a real Git server, doing so can gain your team a lot more.
