[[_refspec]]
=== Ang Refspec

Sa buong aklat na ito, ginamit namin ang simpleng pagmapa mula sa remote na mga sangay patungo sa mga lokal na reperensiya, ngunit maaring maging mas komplikado ang mga ito.
Ipagpalagay na sumunod ka sa mga huling pares na mga seksyon at nakagawa ng isang maliit na lokal na Git repository, at ngayon ay nais magdagdag ng _remote_ nito:

[source,console]
----
$ git remote add origin https://github.com/schacon/simplegit-progit
----

Ang pagpapatakbo ng command na nasa ibabaw ay magdaragdag ng seksyon sa `.git/config` na file ng iyong repository, na tumutukoy sa pangalan ng remote (`origin`), ang URL ng remote na repository, at ang _refspec_ na gagamitin para sa pagkuha:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

Ang format ng refspec ay, una, ang opsyonal na `+`, sinusundan ng `<src>:<dst>`, kung saan ang `<src>` ay ang pattern para sa mga reperensiya sa remote na bahagi at `<dst>` ay kung saan ang mga reperensiya ay susubaybayan nang lokal.
Ang `+` ay nagsasabi sa Git na i-update ang reperensiya kahit na ito ay hindi isang mabilis na pasulong.

In the default case that is automatically written by a `git remote add` command, Git fetches all the references under `refs/heads/` on the server and writes them to `refs/remotes/origin/` locally.
So, if there is a `master` branch on the server, you can access the log of that branch locally via any of the following:

[source,console]
----
$ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master
----

They're all equivalent, because Git expands each of them to `refs/remotes/origin/master`.

If you want Git instead to pull down only the `master` branch each time, and not every other branch on the remote server, you can change the fetch line to refer to that branch only:

[source]
----
fetch = +refs/heads/master:refs/remotes/origin/master
----

This is just the default refspec for `git fetch` for that remote.
If you want to do a one-time only fetch, you can specify the specific refspec on the command line, too.
To pull the `master` branch on the remote down to `origin/mymaster` locally, you can run:

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster
----

You can also specify multiple refspecs.
On the command line, you can pull down several branches like so:

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic
----

In this case, the `master` branch pull was rejected because it wasn't listed as a fast-forward reference.
You can override that by specifying the `+` in front of the refspec.

You can also specify multiple refspecs for fetching in your configuration file.
If you want to always fetch the `master` and `experiment` branches from the `origin` remote, add two lines:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment
----

You can't use partial globs in the pattern, so this would be invalid:

[source,ini]
----
fetch = +refs/heads/qa*:refs/remotes/origin/qa*
----

However, you can use namespaces (or directories) to accomplish something like that.
If you have a QA team that pushes a series of branches, and you want to get the `master` branch and any of the QA team's branches but nothing else, you can use a config section like this:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*
----

If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way.

[[_pushing_refspecs]]
==== Pushing Refspecs

It's nice that you can fetch namespaced references that way, but how does the QA team get their branches into a `qa/` namespace in the first place?
You accomplish that by using refspecs to push.

If the QA team wants to push their `master` branch to `qa/master` on the remote server, they can run

[source,console]
----
$ git push origin master:refs/heads/qa/master
----

If they want Git to do that automatically each time they run `git push origin`, they can add a `push` value to their config file:

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master
----

Again, this will cause a `git push origin` to push the local `master` branch to the remote `qa/master` branch by default.

==== Pagtanggal Ng Mga Reperensiya

Maari mo ring gamitin ang refspec upang tanggalin ang mga reperensiya mula sa remote na server sa pamamagitan ng pagpapatakbao ng tulad nito:

[source,console]
----
$ git push origin :topic
----



Dahil ang refspec ay `<src>:<dst>`, sa pamamagitan ng pagtanggal ng `<src>` na bahagi, ito ay nagsasabi na gawing ang `topic` na sanga sa remote na wala, na tinatanggal ito.

O maaari mong gamitin ang mas bagong syntax (magagamit mula sa Git v1.7.0):

[source,console]
----
$ git push origin --delete topic
----
