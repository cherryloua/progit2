==== Git at TFS

(((Pakikipag-ugnayan sa ibang mga VCS, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Ang Git ay nagiging popular sa mga developer ng Windows, at kung ikaw ay sumusulat ng code sa Windows, mayroong magandang posibilidad na ikaw ay gumagamit ng Team Foundation Server (TFS) ng Microsoft.
Ang TFS ay isang kolaborasyon na suite na naglalaman ng kasiraan at work-item na pagmamasid, proseso na sumusuporta para sa Scrum at iba pa, code review, at kontrol ng bersyon.
Mayroong kakaunting kalituhan sa unahan: Ang *TFS* ay ang server, na sumusuporta sa pagkontrol ng source code gamit ang parehong Git at sarili nitong pasadyang VCS, na tinawag nilang *TFVC* (Team Foundation Version Control).
Ang Git na suporta ay isang medyo bagong tampok para sa TFS (ipinapadala kasama ang 2013 na bersyon), kaya lahat ng mga kasangkapan na nauuna sa iyon na tumutukoy sa bersyon-kontrol na bahagi bilang ``TFS'', kahit na sila ay kadalasang nagtatrabaho gamit ang TFVC.

Kung natagpuan mo ang iyong sarili sa isang koponan na gumagamit ng TFVC ngunit gugustuhin mong gumamit ng Git bilang iyong bersyon-kontrol na kliyente, may isang proyekto para sa iyo.

===== Aling Kasangkapan

(((git-tf)))(((git-tfs)))
Sa katunayan, mayroong dalawa: ang git-tf at git-tfs.

Ang Git-tfs (matatagpuan sa https://github.com/git-tfs/git-tfs[]) ay isang .NET na proyekto, at (batay sa pagkakasulat nito) ito ay tumatakbo lamang sa Windows.
Upang magtrabaho gamit ang mga repositoryo ng Git, ito ay gumagamit ng .NET na mga ugnayan para sa libgit2, isang library-oriented na pagpapatupad ng Git na napakainam sa pagganap at nagpapahintulot ng maraming umaangkop sa bituka ng isang Git na repositoryo.
Ang Libgit2 ay hindi isang kompletong pagpapatupad ng Git, kaya upang sakupin ang mga kaibahan ang git-tfs ay talagang tumatawag ng command-line ng Git na kliyente para sa ilang mga operasyon, kaya walang artipisyal na mga hangganan sa kung ano ang maaari nitong gawin sa Git na mga repositoryo.
Ang suporta nito sa TFVC na mga tampok ay sobrang gulang, dahil ito ay gumagamit ng Visual Studio na mga pagpupulong para sa mga operasyon sa mga server.
Ito ay nangangahulugan na kinakailangan mo ng access sa mga pagpupulong na iyon, na nangangahulugang dapat kang mag-install ng isang kamakailang bersyon ng Visual Studio (anumang edisyon mula sa 2010 na bersyon, na nagsasama ng Express mula sa 2012 na bersyon), o ang Visual Studio na SDK.

Ang Git-tf (na ang tahanan ay nasa https://gittf.codeplex.com[]) ay isang Java na proyekto, at dahil dito ay tumatakbo sa anumang kompyuter kasama ang isang Java runtime na enviroment.
Nag-i-interface ito gamit ang Git na mga repostoryo sa pamamagitan ng JGit (isang JVM na pagpapatupad ng Git), na nangangahulugan na ito ay may birtwal na walang mga limitasyon sa termino ng mga function ng Git.
Samantala, ang suporta nito para sa TFVC ay limitado kaysa sa kung ano ang mayroon ng git-tfs – hindi ito sumusuporta ng mga branch, halimbawa.

Kaya bawat kasangkapan ay mayroong mga kalamangan at kahinaan, at mayroong maraming mga sitwasyon na pabor sa isa kaysa sa isa pa.
Sasakupin natin ang mga paunang paggamit nitong dalawa sa librong ito.

[TANDAAN]
====
Kakailanganin mo ng access sa isang TFVC na nakabase na repositoryo upang sumunod sa mga tagubiling ito.
Ang mga ito ay hindi kasing dami sa kagubatan kagaya ng Git o Subversion na mga repositoryo, kaya marahil dapat kang gumawa ng isa para sa iyong sarili.
Ang Codeplex (https://www.codeplex.com[]) o Visual Studio Online (http://www.visualstudio.com[]) ay parehong magandang pagpipilian para rito.
====


===== Pagsisimula: `git-tf`

Ang unang bagay na gagawin mo, katulad ng anumang Git na proyekto, ay mag-clone.
Narito ang kung ano ang hitsura katulad ng nasa `git-tf`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Ang unang argumento ay ang URL ng isang TFVC na koleksyon, ang pangalawa ay ang URL nakapormang `$/project/branch`, at ang pangatlo ay ang landas patungo sa lokal na repositoryo ng Git na lilikhain (ang panghuli ay opsyonal).
Ang Git-tf ay maaari lamang magtrabaho sa isang branch sa isang pagkakataon; kung gusto mong gumawa ng isang bagong clone mula sa branch na iyon.

Ito ay gumagawa ng isang buong functional na repositoryo ng Git:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Ito ay tinatawag na isang _mababaw_ na clone, na nangangahulugan na ang napapanahong hanay ng pagbabago lamang ang na-download.
Ang TFVC ay hindi nakadesinyo para sa bawat kliyente upang magkaroon ng isang buong kopya ng kasaysayan, kaya ang git-tf na mga default ay kumukuha lamang ng napapanahong bersyon, na higit pang mas mabilis.

Kung mayroon kang ilang oras, marahil ito ay sulit upang i-clone ang buong kasaysayan ng proyekto, gamit ang `--deep` na opsyon:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Pansinin ang mga tag na may mga pangalan katulad ng `TFS_C35189`; ito ay isang tampok na tumutulong sa iyo upang malaman kung anong Git na mga commit ang nauugnay sa TFVC na mga hanay ng pagbabago.
Ito ay isang magandang paraan upang irepresenta ito, dahil maaari mong tingnan gamit ang isang simpleng log na utos kung ano ang iyong mga commit na nauugnay sa isang snapshot na umiiral din sa TFVC.
Sila ay hindi na kinakailangan (at sa katunayan maaari mong i-off ang mga ito gamit ang `git config git-tf.tag false`) – ang git-tf ay pinapanatili ang tunay na commit-changeset na mga pagmapa sa `.git/git-tf` na file.


===== Pagsisimula: `git-tfs`

Ang Git-tfs na pag-clone ay kumikilos ng medyo may kaibahan.
Suriin:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Pansinin ang `--with-branches` na flag.
Ang Git-tfs ay may kakayahang sa pagmapa ng TFVC na mga branch patungo sa Git na mga branch, at ang flag na ito ay sinasabihan ito na mag-set up ng isang lokal na Git na branch para sa bawat TFVC na branch.
Ito ay labis na inirerekomenda kung ikaw ay kailanmang nag-branch o nag-merge sa TFS, ngunit ito ay hindi gagana sa isang mas lumang server kaysa sa TFS 2010 – bago ang release na iyon, ang ``mga branch'' ay mga folder lamang, kaya ang git-tfs ay hindi makakapagsabi sa kanila mula sa regular na mga folder.

Tingnan natin ang resulta na repositoryo ng Git:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

May dalawang lokal na mga branch, ang `master` at `featureA`, na nagrerepresenta ng paunang panimulang punto ng clone (`Trunk` sa TFVC) at isang child na branch (`featureA` sa TFVC).
Maaari mo ring makita na ang `tfs` na ``remote'' ay mayroon ding pares ng refs: ang `default` at `featureA`, na kumakatawan sa TFVC na mga branch.
Ang Git-tfs ay magmamapa ng branch na kung saan ka nag-clone patungo sa `tfs/default`, at ang mga iba pa ay kukuha ng kanilang sariling mga pangalan.

Iba pang bagay na pansinin ay ang `git-tfs-id:` na mga linya sa commit na mga mensahe.
Sa halip na mga tag, ang git-tfs ay gumagamit ng mga marka na ito upang iugnay ang TFVC na mga hanay ng pagbabago sa Git na mga commit.
Ito ay may implikasyon na ang iyong Git na mga commit ay magkakaroon ng isang naiibang SHA-1 na hash bago at pagkatapos sila na-push sa TFVC.

===== Daloy ng trabaho ng Git-tf[s]

[TANDAAN]
====
Anumang kasangkapan ang iyong ginagamit, dapat kang magtakda ng isang pares ng Git na kompigurasyon na mga halaga upang iwasan ang pagpapatakbo nang may mga isyu.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Ang halatang susunod na bagay na gugustuhin mong gawin ay ang pagtrabaho sa proyekto.
Ang TFVC at TFS ay may iilang mga tampok na maaaring magdagdag ng pagkakumplikado sa iyong daloy ng trabaho:

. Ang tampok na mga branch na hindi narepresenta sa TFVC ay nagdaragdag ng kakaunting pagkakumplikado.
  Ito ay walang kinalaman sa *sobrang* magkaibang mga paraan na nirerepresenta ng TFVC at Git na mga branch.
. Magkaroon ng kamalayan na ang TFVC ay nagpapahintulot sa mga user upang mag-``checkout'' ng mga file mula sa server, kinakandado sila upang walang iba na makapag-edit sa kanila.
  Ito ay halatang hindi ka titigilan sa pag-edit sa kanila sa iyong lokal na repositoryo, ngunit ito ay maaaring maghadlang kapag umabot sa panahon upang mag-push ng iyong mga pagbabago sa TFVC na server.
. Ang TFS ay may konsepto na ``gated'' na mga checkin, kung saan ang isang TFS na build-test cycle ay kailangang matagumpay na kompletuhin bago pahintulutan ang checkin.
  Ito ay gumagamit ng ``shelve'' na function sa TFVC, na hindi natin sasakupin nang detalye dito.
    Maaari mong ipeke ito sa isang manwal na anyo gamit ang git-tf, at ang git-tfs ay nagbibigay ng `checkintool` na utos na gate-aware.

Sa interes ng kaigsian, ang ating sasakupin dito ay ang masayang landas, na mga sidestep o nag-iiwas ng halos ng mga isyung ito.

===== Daloy ng trabaho: `git-tf`

Sabihin nating natapos mo ang ilang trabaho, gumawa ng ilang Git na mga commit sa `master`, at handa ka nang ibahagi ang iyong pag-unlad sa TFVC na server.
Narito ang ating Git na repositoryo:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Gusto nating kumuha ng snapshot na nasa `4178a82` na commit at i-push paitaas ito sa TFVC na server.
Unang mga bagay na nauuna: tingnan natin kung anuman sa ating mga kasama sa koponan ay gumawa ng anuman mula nung huli tayong kumonekta:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Looks like someone else is working, too, and now we have divergent history.
This is where Git shines, but we have two choices of how to proceed:

. Making a merge commit feels natural as a Git user (after all, that's what `git pull` does), and git-tf can do this for you with a simple `git tf pull`.
  Be aware, however, that TFVC doesn't think this way, and if you push merge commits your history will start to look different on both sides, which can be confusing.
  However, if you plan on submitting all of your changes as one changeset, this is probably the easiest choice.
. Rebasing makes our commit history linear, which means we have the option of converting each of our Git commits into a TFVC changeset.
  Since this leaves the most options open, we recommend you do it this way; git-tf even makes it easy for you with `git tf pull --rebase`.

The choice is yours.
For this example, we'll be rebasing:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Now we're ready to make a checkin to the TFVC server.
Git-tf gives you the choice of making a single changeset that represents all the changes since the last one (`--shallow`, which is the default) and creating a new changeset for each Git commit (`--deep`).
For this example, we'll just create one changeset:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

There's a new `TFS_C35348` tag, indicating that TFVC is storing the exact same snapshot as the `5a0e25e` commit.
It's important to note that not every Git commit needs to have an exact counterpart in TFVC; the `6eb3eb5` commit, for example, doesn't exist anywhere on the server.

That's the main workflow.
There are a couple of other considerations you'll want to keep in mind:

* There is no branching.
  Git-tf can only create Git repositories from one TFVC branch at a time.
* Collaborate using either TFVC or Git, but not both.
  Different git-tf clones of the same TFVC repository may have different commit SHA-1 hashes, which will cause no end of headaches.
* If your team's workflow includes collaborating in Git and syncing periodically with TFVC, only connect to TFVC with one of the Git repositories.

===== Workflow: `git-tfs`

Let's walk through the same scenario using git-tfs.
Here are the new commits we've made to the `master` branch in our Git repository:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Now let's see if anyone else has done work while we were hacking away:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Yes, it turns out our coworker has added a new TFVC changeset, which shows up as the new `aea74a0` commit, and the `tfs/default` remote branch has moved.

As with git-tf, we have two fundamental options for how to resolve this divergent history:

. Rebase to preserve a linear history.
. Merge to preserve what actually happened.

In this case, we're going to do a ``deep'' checkin, where every Git commit becomes a TFVC changeset, so we want to rebase.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Now we're ready to complete our contribution by checking in our code to the TFVC server.
We'll use the `rcheckin` command here to create a TFVC changeset for each Git commit in the path from HEAD to the first `tfs` remote branch found (the `checkin` command would only create one changeset, sort of like squashing Git commits).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Notice how after every successful checkin to the TFVC server, git-tfs is rebasing the remaining work onto what it just did.
That's because it's adding the `git-tfs-id` field to the bottom of the commit messages, which changes the SHA-1 hashes.
This is exactly as designed, and there's nothing to worry about, but you should be aware that it's happening, especially if you're sharing Git commits with others.

TFS has many features that integrate with its version control system, such as work items, designated reviewers, gated checkins, and so on.
It can be cumbersome to work with these features using only a command-line tool, but fortunately git-tfs lets you launch a graphical checkin tool very easily:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

It looks a bit like this:

.The git-tfs checkin tool.
image::images/git-tfs-ct.png[The git-tfs checkin tool.]

This will look familiar to TFS users, as it's the same dialog that's launched from within Visual Studio.

Git-tfs also lets you control TFVC branches from your Git repository.
As an example, let's create one:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Creating a branch in TFVC means adding a changeset where that branch now exists, and this is projected as a Git commit.
Note also that git-tfs *created* the `tfs/featureBee` remote branch, but `HEAD` is still pointing to `master`.
If you want to work on the newly-minted branch, you'll want to base your new commits on the `1d54865` commit, perhaps by creating a topic branch from that commit.

===== Git and TFS Summary

Git-tf and Git-tfs are both great tools for interfacing with a TFVC server.
They allow you to use the power of Git locally, avoid constantly having to round-trip to the central TFVC server, and make your life as a developer much easier, without forcing your entire team to migrate to Git.
If you're working on Windows (which is likely if your team is using TFS), you'll probably want to use git-tfs, since its feature set is more complete, but if you're working on another platform, you'll be using git-tf, which is more limited.
As with most of the tools in this chapter, you should choose one of these bersyon-kontrol na mga sistema to be canonical, and use the other one in a subordinate fashion – either Git or TFVC should be the center of collaboration, but not both.
