=== Mga Katangian ng Git

(((attributes)))
Ang ilan sa mga setting na ito ay maaari ding tinukoy para sa isang landas, kaya inilapat ng Git ang mga setting na iyon para lamang sa isang subdirectory o subset ng mga file.
Ang mga setting na tukoy sa landas na ito ay tinatawag na mga katangian ng Git at nakatakda sa alinman sa `.gitattributes` na file sa isa sa mga direktoryo mo (sa kasanayan ito ay ang ugat ng iyong proyekto) o sa `.git/info/attributes` na file kung hindi mo gusto ang mga katangian ng file na naka-commit sa iyong proyekto.

Sa paggamit ng mga katangian, maaari mong gawin ang mga bagay tulad ng tukuyin ang mga hiwalay na estratehiya ng pagcommit para sa mga indibidwal na file o mga direktoryo sa iyong proyekto, sabihin sa Git kung paano i-diff ang mga file na di-teksto, o magkaroon ng nilalaman ng Filter ng Git bago mo itong i-check-in o i-check-out sa Git.
Sa seksyon na ito, matututunan mo ang tungkol sa ilang mga katangian na maaari mong itakda sa iyong mga landas sa iyong proyektong Git at tingnan ang kakaunting mga halimbawa sa paggamit ng katangian na ito sa pagsasanay.

==== Mga File na Binary

(((binary files)))
Ang isang magandang paraan para sa kung saan maaari mong gamitin ang mga katangian ng Git ay ang pagsasabi sa Git na ang mga file ay binary (sa mga iilang kaso maaring hindi nito malaman) at pagbibigay ng Git ng espesyal na mga tagubilin tungkol sa kung paano pangasiwaan ang mga file na iyon
For instance, some text files may be machine generated and not diffable, whereas some binary files can be diffed.
Halimbawa, ang ilang mga tekstong file ay maaaring ginawa ng makina at hindi maaring i-diff, samantalang ang ilang mga binary file ay maaaring i-diff.
Makikita mo kung paano sabihin sa Git na kung ano ang nararapat.

===== Identifying Binary Files

Ilang mga file ay parang mga file na teksto ngunit para sa lahat ng mga sadya at layunin ay dapat tratuhin bilang binary data.
Halimbawa, ang proyektong Xcode sa Mac ay naglalaman ng file na nagtatapos sa `.pbxproj`, kung saan ay isang karaniwang JSON (naka-format sa malinaw na tekstong Javascript na data) dataset na isinulat sa disk ng IDE, kung saan ay nagrerecord sa iyong mga setting ng paggawa at iba pa.
Sa totoo lang kahit na ito ay isang tekstong file (dahil ang lahat ng mga ito ay UTF-8), hindi mo nais na tratuhin ito bilang ganyan dahil ito ay talagang isang magaan na database - hindi mo maaaring pagsamahin ang mga nilalaman kung binago ito ng dalawang tao, at ang pag-diff sa pangkalahatan ay hindi rin makakatulong.
Ang file ay sinadya upang maubos ng isang makina
Sa kakanyahan, nais mong tratuhin ito tulad ng isang binary file.

Para sabihin sa Git na tratuhin ang lahat ng `pbxproj` na mga file bilang data na binary, idagdag ang mga sumusunod na linya sa iyong `.gitattributes` na file:

[source,ini]
----
*.pbxproj binary
----

Sa ngayon, hindi sisikapin ng Git na palitan o ayusin ang mga isyu ng CRLF; ni hindi nito susubukang magkalkula o i-print ang isang diff para sa mga pagbabago sa file na ito kung ikaw ang magpapatakbo ng `git show` o `git diff` sa iyong proyekto.

===== Diffing Binary Files

Maaari mo ring gamitin ang pag-aandar ng mga katangian ng Git upang epektibong i-diff ang mga file na binary.
Gawin mo ito sa pamamagitan ng pagsasabi sa Git kung paano palitan ang iyong data na binary para sa tekstong format na pwedeng ikumpara sa normal na diff.

Una, gagamitin mo ang pamamaraan na ito upang malutas ang isa sa mga pinaka nakakainis na mga problema na kilala sa sangkatauhan: pagkokontrol sa bersyon ng mga dokumentong Microsoft Word.
Alam ng lahat na ang Word ay ang pinaka-kasuklam-suklam na editor, ngunit nakakatwa na ginagamit pa ng lahat ito.
Kung gusto mong kontrolin ang bersyon ng mga dokumentong Word, maaari mong ilagay ang mga ito sa isang repositoryo ng Git at parati mo itong i-commit kada sandali; ngunit ano ba ang magandang ma idudulot nito?
Kung patatakbuhin mo ang `git diff` kadalasan, makikita mo lamang ang isang bagay na katulad nito:

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ
----

Hindi mo maaaring direktang ikumpara ang dalawang mga bersyon maliban kung suriin mo ang mga ito at i-scan ang mga ito nang manu-mano, tama?
Sa kinalabasan maaari mong gawin ito na medyo mabuti gamit ang mga katangian ng Git.
Ilagay ang sumusunod na linya sa iyong `.gitattributes` na file:

[source,ini]
----
*.docx diff=word
----

Sinasabi nito sa Git na ang anumang file na tumutugma sa pattern na ito (`.docx`) ay dapat gamitin ang ``word'' na pagsasala kapag sinubukan mong tingnan ang isang diff na naglalaman ng mga pagbabago.
Ano ang ``word'' na pagsasala?
Kailangan mong itakda ito.
Dito mo i-configure ang Git upang gamitin ang `docx2txt` na programa para palitan ang mga dokumentong Word upang gawing nababasang mga file na teksto, na kung saan ito ay i-diff ng maayos.

Una, kailangan mong i-install ang `docx2txt`; maari mo itong i-download sa http://docx2txt.sourceforge.net[].
Sundin ang mga tagubilin sa `INSTALL` na file upang ilagay ito sa isang lugar na kung saan maaring mahanap ng iyong shell.
Susunod, magsusulat ka ng script na pambalot upang i-convert ang output sa format na inaasahan ng Git.

Lumikha ng isang file na sa isang lugar sa iyong landas na tinatawag na `docx2txt`, at idagdag ang mga nilalaman na ito:

[source,console]
----
#!/bin/bash
docx2txt.pl "$1" -
----

Huwag kalimotan na i-`chmod a+x` ang file na iyon.
Sa katapusan, maaari mong i-kompigura ang Git upang magamit ang script na ito:

[source,console]
----
$ git config diff.word.textconv docx2txt
----

Alam na ngayon ng Git kung susubukang gumawa ng diff sa pagitan ng dalawang snapshot, at alinman sa mga file na nagtatapos sa `.docx`, dapat itong patakbuhin ang mga file sa pamamagitan ng ``word'' na salaan, na tinukoy bilang programa ng `docx2txt`.
Ito ay epektibong gumagawa ng magandang bersyon ng tekstong nakabatay sa iyong Word na mga file bago sinusubukang i-diff sila. 

Narito ang isang halimbawa: Kabanata 1 ng aklat na ito ay napalitan sa format ng Word at nakatuon sa isang repositoryong Git.
Pagkatapos ay idinagdag ang isang bagong talata.
Narito kung ano ang ipinapakita ng `git diff`:

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 Ang kabanatang ito ay tungkol sa pagsisimula sa Git. Magsisimula tayo sa simula sa pamamagitan ng pagpapaliwanag ng ilang mga background sa mga kasangkapan ng pagkontrol sa bersyon, pagkatapos ay lilipat sa kung paano makakuha ng Git na tumatakbo sa iyong sistema at sa panghuli kung paano makakuha ng setup na ito upang simulan ang pakikipagtulungan. Sa dulo ng kabanatang ito
dapat mong maintindihan kung bakit ang Git ay nandito, bakit dapat mong gamitin ito at dapat mong i-setup ang lahat upang magawa ito.
1.1. Tungkol sa Pagkontrol ng Bersyon
Ano ang "pagkontrol sa bersyon", at bakit dapat kang makialam? Pagkontrol sa bersyon ay isang sistema na nagtatala sa mga pagbabago sa isang file o hanay ng mga file sa paglipas ng panahon upang maaari mong iurong ang mga tiyak na mga bersyon pagkalipas.   
+Testing: 1, 2, 3.
 Kung ikaw ay taga-desinyo ng graphic o ng web at gusto mong itago ang bawat bersyon ng isang imahe o ang pagkakaayos (kung saan ay tiyak na ninanais mo ito), ang Version Control System (VCS) ay isang matalinong bagay na magagamit.
 It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
----

Git successfully and succinctly tells us that we added the string ``Testing: 1, 2, 3.'', which is correct.
It's not perfect – formatting changes wouldn't show up here – but it certainly works.

Another interesting problem you can solve this way involves diffing image files.
One way to do this is to run image files through a filter that extracts their EXIF information – metadata that is recorded with most image formats.
If you download and install the `exiftool` program, you can use it to convert your images into text about the metadata, so at least the diff will show you a textual representation of any changes that happened.
Put the following line in your `.gitattributes` file:

[source,ini]
----
*.png diff=exif
----

Configure Git to use this tool:

[source,console]
----
$ git config diff.exif.textconv exiftool
----

If you replace an image in your project and run `git diff`, you see something like this:

[source,diff]
----
diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha
----

You can easily see that the file size and image dimensions have both changed.

[[_keyword_expansion]]
==== Keyword Expansion

(((keyword expansion)))
SVN- or CVS-style keyword expansion is often requested by developers used to those systems.
The main problem with this in Git is that you can't modify a file with information about the commit after you've committed, because Git checksums the file first.
However, you can inject text into a file when it's checked out and remove it again before it's added to a commit.
Git attributes offers you two ways to do this.

First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.
If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.
It's important to notice that it isn't the SHA-1 of the commit, but of the blob itself.
Put the following line in your `.gitattributes` file:

[source,ini]
----
*.txt ident
----

Add an `$Id$` reference to a test file:

[source,console]
----
$ echo '$Id$' > test.txt
----

The next time you check out this file, Git injects the SHA-1 of the blob:

[source,console]
----
$ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $
----

However, that result is of limited use.
If you've used keyword substitution in CVS or Subversion, you can include a datestamp – the SHA-1 isn't all that helpful, because it's fairly random and you can't tell if one SHA-1 is older or newer than another just by looking at them.

It turns out that you can write your own filters for doing substitutions in files on commit/checkout.
These are called ``clean'' and ``smudge'' filters.
In the `.gitattributes` file, you can set a filter for particular paths and then set up scripts that will process files just before they're checked out (``smudge'', see <<filters_a>>) and just before they're staged (``clean'', see <<filters_b>>).
These filters can be set to do all sorts of fun things.

[[filters_a]]
.The ``smudge'' filter is run on checkout.
image::images/smudge.png[The ``smudge'' filter is run on checkout.]

[[filters_b]]
.The ``clean'' filter is run when files are staged.
image::images/clean.png[The ``clean'' filter is run when files are staged.]

The original commit message for this feature gives a simple example of running all your C source code through the `indent` program before committing.
You can set it up by setting the filter attribute in your `.gitattributes` file to filter `*.c` files with the ``indent'' filter:

[source,ini]
----
*.c filter=indent
----

Then, tell Git what the ``indent'' filter does on smudge and clean:

[source,console]
----
$ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat
----

In this case, when you commit files that match `*.c`, Git will run them through the indent program before it stages them and then run them through the `cat` program before it checks them back out onto disk.
The `cat` program does essentially nothing: it spits out the same data that it comes in.
This combination effectively filters all C source code files through `indent` before committing.

Another interesting example gets `$Date$` keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.
Here is a small Ruby script that does that:

[source,ruby]
----
#! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:"%ad" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')
----

All the script does is get the latest commit date from the `git log` command, stick that into any `$Date$` strings it sees in stdin, and print the results – it should be simple to do in whatever language you're most comfortable in.
You can name this file `expand_date` and put it in your path.
Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.
You'll use a Perl expression to clean that up on commit:

[source,console]
----
$ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'
----

This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.
Now that your filter is ready, you can test it by setting up a Git attribute for that file that engages the new filter and creating a file with your `$Date$` keyword:

[source,ini]
----
date*.txt filter=dater
----

[source,console]
----
$ echo '# $Date$' > date_test.txt
----

If you commit those changes and check out the file again, you see the keyword properly substituted:

[source,console]
----
$ git add date_test.txt .gitattributes
$ git commit -m "Testing date expansion in Git"
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$
----

You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the `.gitattributes` file is committed and passed around with the project, but the driver (in this case, `dater`) isn't, so it won't work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly.

==== Exporting Your Repository

(((archiving)))
Git attribute data also allows you to do some interesting things when exporting an archive of your project.

===== `export-ignore`

You can tell Git not to export certain files or directories when generating an archive.
If there is a subdirectory or file that you don't want to include in your archive file but that you do want checked into your project, you can determine those files via the `export-ignore` attribute.

For example, say you have some test files in a `test/` subdirectory, and it doesn't make sense to include them in the tarball export of your project.
You can add the following line to your Git attributes file:

[source,ini]
----
test/ export-ignore
----

Now, when you run `git archive` to create a tarball of your project, that directory won't be included in the archive.

===== `export-subst`

When exporting files for deployment you can apply `git log`'s formatting and keyword-expansion processing to selected portions of files marked with the
`export-subst` attribute.

For instance, if you want to include a file named `LAST_COMMIT` in your project, and have metadata about the last commit automatically injected into it when `git archive` runs, you can for example set up your `.gitattributes` and `LAST_COMMIT` files like this:

[source,ini]
----
LAST_COMMIT export-subst
----

[source,console]
----
$ echo 'Last commit date: $Format:%cd by %aN$' > LAST_COMMIT
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives'
----

When you run `git archive`, the contents of the archived file will look like this:

[source,console]
----
$ git archive HEAD | tar xCf ../deployment-testing -
$ cat ../deployment-testing/LAST_COMMIT
Last commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott Chacon
----

The substitutions can include for example the commit message and any `git notes`, and `git log` can do simple word wrapping:

[source,console]
----
$ echo '$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$' > LAST_COMMIT
$ git commit -am 'export-subst uses git log'\''s custom formatter

git archive uses git log'\''s `pretty=format:` processor
directly, and strips the surrounding `$Format:` and `$`
markup from the output.
'
$ git archive @ | tar xfO - LAST_COMMIT
Last commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700
       export-subst uses git log's custom formatter

         git archive uses git log's `pretty=format:` processor directly, and
         strips the surrounding `$Format:` and `$` markup from the output.
----

The resulting archive is suitable for deployment work, but like any exported archive it isn't suitable for further development work.

==== Merge Strategies

(((merging, strategies)))
You can also use Git attributes to tell Git to use different merge strategies for specific files in your project.
One very useful option is to tell Git to not try to merge specific files when they have conflicts, but rather to use your side of the merge over someone else's.

This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.
Say you have a database settings file called `database.xml` that is different in two branches, and you want to merge in your other branch without messing up the database file.
You can set up an attribute like this:

[source,ini]
----
database.xml merge=ours
----

And then define a dummy `ours` merge strategy with:

[source,console]
----
$ git config --global merge.ours.driver true
----

If you merge in the other branch, instead of having merge conflicts with the `database.xml` file, you see something like this:

[source,console]
----
$ git merge topic
Auto-merging database.xml
Merge made by recursive.
----

In this case, `database.xml` stays at whatever version you originally had.
